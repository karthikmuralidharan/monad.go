// result monad
// generated by github.com/nanoservice/monad.go/result
// type: {{T}}
package result_{{t}}

import ({{I}})

type Result struct {
	value *{{T}}
	err   error
}

type handler func({{T}}) Result
type errorHandler func(error)

func NewResult(value {{T}}, err error) Result {
  return Result{value: &value, err: err}
}

func Success(value {{T}}) Result {
	return Result{value: &value, err: nil}
}

func Failure(err error) Result {
	return Result{value: nil, err: err}
}

func (r Result) Bind(fn handler) Result {
	if r.err != nil {
		return r
	}
	return fn(*r.value)
}

func (r Result) Chain(fns... handler) Result {
  for _, fn := range fns {
    r = r.Bind(fn)
  }
  return r
}

func (r Result) OnErrorFn(fn errorHandler) Result {
  if r.err != nil {
    fn(r.err)
  }
  return r
}
